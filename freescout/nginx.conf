server {
    listen {{NGINX_LISTEN_PORT}};
    root {{NGINX_WEBROOT}}/public;
    index index.php;

    # Set the $real_scheme variable to the value of the X-Forwarded-Proto header, if present.
    map $http_x_forwarded_proto $real_scheme {
      default $http_x_forwarded_proto;
      ''      $scheme;
    }

    # Vouch handles OAuth authentication of users, any requests to /vouch
    # will be 
    location /vouch {
      proxy_pass http://vouch:9090; # must not! have a slash at the end
      proxy_set_header Host $http_host;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";

      # these return values are used by the @error401 call
      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # auth_request calls will return a 401 if the user is unauthenticated, catching
    # it here results in the user being redirected to Vouch to log in.
    error_page 401 = @error401;

    location @error401 {
      # redirect to Vouch Proxy for login
      return 302 $real_scheme://$http_host/vouch/login?url=$real_scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }

    # Capture Freescout's logout page and tell Vouch to act on it instead.
    location /logout {
      return 302 $real_scheme://$http_host/vouch/logout?url=$real_scheme://$http_host;
    }

    # If there's a file on the file system serve it up, otherwise send the request
    # to index.php
    location / {
      try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
      # Before each request a call will be made to /vouch/validate to check the
      # user has a JWT issued from UFFD, and that the JWT is valid. If it is then
      # their username will be returned in the X-Vouch-User header, which we then
      # put in a FastCGI parameter for use by Freescout.
      auth_request /vouch/validate;
      auth_request_set $auth_resp_user $upstream_http_x_vouch_user;
      fastcgi_param X_AUTH_USER $auth_resp_user;
      
      include /etc/nginx/snippets/php-fpm.conf;
      try_files $uri =404;
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_index index.php;
      include fastcgi_params;
    }

    location ~* ^/storage/attachment/ {
      auth_request /vouch/validate;
      auth_request_set $auth_resp_user $upstream_http_x_vouch_user;

      expires 1M;
      access_log off;
      try_files $uri $uri/ /index.php?$query_string;
    }

    location ~* ^/(?:css|js)/.*\.(?:css|js)$ {
      expires 2d;
      access_log off;
      add_header Cache-Control "public, must-revalidate";
    }

    location ~* ^/(?:css|fonts|img|installer|js|modules|[^\\\]+\..*)$ {
      expires 1M;
      access_log off;
      add_header Cache-Control "public";
    }

    location ~ /\. {
      deny  all;
    }

    ### Don't edit past here
    include /etc/nginx/snippets/site_optimization.conf;
    include /etc/nginx/snippets/exploit_protection.conf;
}
